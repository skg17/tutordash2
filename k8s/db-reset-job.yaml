apiVersion: batch/v1
kind: Job
metadata:
  generateName: rails-db-reset-
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  labels:
    app.kubernetes.io/instance: tutordash
spec:
  template:
    spec:
      containers:
      - name: db-reset-container
        image: your-registry/your-rails-app-image:latest
        command: ["/bin/bash", "-c"]
        args:
          # --- ADDED: Postgres command to forcefully terminate connections ---
          - |
            set -e;
            export DATABASE_URL='postgres://$(PGUSER):$(PGPASSWORD)@postgres-svc:5432/tutordash_production';
            
            # 1. Forcefully terminate all existing connections to the target database.
            # This must run successfully before db:reset can drop the database.
            # We connect to the template1 DB (a safe default) to kill connections to the target DB.
            echo "Terminating existing connections to tutordash_production..."
            psql -h postgres-svc -U $(PGUSER) -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'tutordash_production' AND pid <> pg_backend_pid();" template1
            
            # 2. Run the destructive rails command
            echo "Running rails db:reset..."
            DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bundle exec rails db:reset
            echo "Database reset complete."
          
        env:
          # --- Environment Variables setup ---
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: DB_USER
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: DB_PASS
          - name: DATABASE_URL
            value: postgres://$(PGUSER):$(PGPASSWORD)@postgres-svc:5432/tutordash_production
            
      restartPolicy: Never
  backoffLimit: 0